{"version":3,"sources":["script.precomp.js"],"names":[],"mappings":"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","file":"script.js","sourcesContent":["// Wait for the DOM Content to finish loading\ndocument.addEventListener('DOMContentLoaded', () => {\n\n    /*\n    Menu functionality\n     */\n    // define all the elements\n    // of the elements\n    const menu = document.getElementById('menu');\n    const navBg = document.getElementsByClassName('nav-bg')[0];\n    const nav = document.getElementsByClassName('nav')[0];\n    const menuContainer = document.querySelector('.menu-container');\n    const menuArray = [menu,navBg, nav, menuContainer];\n\n    // toggleMenu functions\n    const toggleMenu = () => {\n        // if the menuContainer contains active\n        // remove the active class\n        if( menuContainer.classList.contains('active') ){\n            let menuArrayCopy = [...menuArray];\n            manipulateClasses('remove', 'active', menuArrayCopy);\n        }\n        // else add the active class\n        else {\n            let menuArrayCopy = [...menuArray];\n            manipulateClasses('add', 'active', menuArrayCopy);\n        }\n    };\n    // If a selection is made the menu\n    // should also toggle\n    const handleSelection = () => {\n        menu.checked = false;\n        toggleMenu();\n    };\n    // add handleSelection listener to allMenuLinks\n    const allMenuLinks = [...document.querySelectorAll('.nav__link')];\n    allMenuLinks.map( link => {\n        link.addEventListener( 'click', handleSelection);\n    });\n    // add toggleMenu function to\n    // change event of menu checkbox\n    menu.addEventListener('change', toggleMenu);\n});\n// end of menu functionality\n\n\n/*\nUTILITY FUNCTIONS\n */\n/*\n@manipulateClasses function\n    action = string of action to do i.e. add or remove\n    className = string of className to be removed\n    elements = array of elements to remove className from\n                OR string name of className shared by elements\n                want removed\n\n    in edgecase where elements === className you want to remove,\n    just pass in the string of the className\n */\nconst manipulateClasses = (action,className, elements) => {\n    // check if elements were passed\n    // to function\n    switch(action){\n        case 'add':\n            // add code\n            if(elements){\n                switch(elements.constructor) {\n                    //  If elements type is Array, sweet go through\n                    // add the className from the element.classList\n                    case Array:\n                        elements.map(element => (element.classList.add(className)));\n                        break;\n                    //  If elements type is String, sweet go through\n                    //  define an array of that String and add the\n                    //  className from each element.classList\n                    case String:\n                        // make the array\n                        const collection = [...document.getElementsByClassName(elements)];\n                        // while the array has a length\n                        while (collection.length) {\n                            // take the last item off the array\n                            let currentElement = collection.pop();\n                            // manipulate it's class\n                            currentElement.classList.add(className);\n                        }\n                        break;\n                    default:\n                        throw new Error(`Could not add classNames from elements, check arguments`);\n                        break;\n                }\n            } else if(className) {\n                const elements = [...document.getElementsByClassName(className)];\n                elements.map( element => ( element.classList.add(className) ) );\n            } else {\n                throw new Error('Could not manipulate classes, check arguments');\n            }\n            break;\n        case 'remove':\n                // remove code\n                if(elements){\n                    switch(elements.constructor) {\n                        //  If elements type is Array, sweet go through\n                        // remove the className from the element.classList\n                        case Array:\n                            elements.map(element => (element.classList.remove(className)));\n                            break;\n                        //  If elements type is String, sweet go through\n                        //  define an array of that String and remove the\n                        //  className from each element.classList\n                        case String:\n                            // make the array\n                            const collection = [...document.getElementsByClassName(elements)];\n                            // while the array has a length\n                            while (collection.length) {\n                                // take the last item off the array\n                                let currentElement = collection.pop();\n                                // manipulate it's class\n                                currentElement.classList.remove(className);\n                            }\n                            break;\n                        default:\n                            throw new Error(`Could not remove classNames from elements, check arguments`);\n                            break;\n                    }\n                } else if(className) {\n                    const elements = [...document.getElementsByClassName(className)];\n                    elements.map( element => ( element.classList.remove(className) ) );\n                } else {\n                    throw new Error('Could not manipulate classes, check arguments');\n                }\n                break;\n            default:\n                throw new Error('No action, please choose either add or remove.');\n        }\n};\n"]}