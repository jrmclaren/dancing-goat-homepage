{"version":3,"sources":["script.precomp.js"],"names":[],"mappings":"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","file":"script.js","sourcesContent":["// Wait for the DOM Content to finish loading\ndocument.addEventListener('DOMContentLoaded', () => {\n\n    /*\n    Menu functionality\n     */\n\n    const menuIcon = document.getElementById('menu');\n    const navigationBackground = document.getElementsByClassName('nav-bg')[0];\n    const nav = document.getElementsByClassName('nav')[0];\n    const menuContainer = document.querySelector('.menu-container');\n    const navItems = [...document.querySelectorAll('.nav__link')];\n\n    const menuElementsObject = {\n        menuIcon,\n        nav,\n        navItems,\n        navigationBackground,\n        menuContainer\n    };\n\n    class Menu {\n\n        constructor( menuItems ){\n            this.menuIcon = menuItems.menuIcon;\n            this.nav = menuItems.nav;\n            this.navItems = menuItems.navItems;\n            this.navigationBackground = menuItems.navigationBackground;\n            this.menuContainer = menuItems.menuContainer;\n            this.isOpen = false;\n            // bind those functions up to 'this'\n            this.getToggleElements = this.getToggleElements.bind(this);\n            this.handleSelection = this.handleSelection.bind(this);\n            this.toggleMenu = this.toggleMenu.bind(this);\n            this.init = this.init.bind(this);\n        }\n\n        init(){\n            // add handleSelection to each link\n            this.navItems.map( link => {\n                link.addEventListener( 'click', this.handleSelection);\n            });\n            // add toggleMenu to change event on menuIcon (i.e. checkbox)\n            this.menuIcon.addEventListener('change', this.toggleMenu);\n        }\n\n        getToggleElements() {\n            return [this.menuIcon, this.navigationBackground, this.menuContainer];\n        }\n\n        handleSelection() {\n            this.menu.checked = false;\n            this.toggleMenu();\n        };\n\n        toggleMenu() {\n            // if the menuContainer contains active\n            // remove the active class\n            let toggleElements = this.getToggleElements();\n            if( this.isOpen ){\n                manipulateClasses('remove', 'active', toggleElements);\n                this.isOpen = false;\n            }\n            // else add the active class\n            else {\n                manipulateClasses('add', 'active', toggleElements);\n                this.isOpen = true;\n            }\n        };\n    }\n\n    const menu = new Menu(menuElementsObject);\n    menu.init();\n\n/*\nUTILITY FUNCTIONS\n */\n/*\nmanipulateClasses function\n */\n/**\n ** ************** Main usage *******************************\n * @param action = string of action to perform i.e. add or remove\n * @param className = a string of the className you want to remove\n * @param elements = a string or Array of classNames to remove the classes from\n *\n * ************** Alternative usage *******************************\n *\n * @param action = string of action to perform i.e. add or remove\n * @param className = a string that you want to remove from an element\n *                    the same className you want to remove\n */\nconst manipulateClasses = (action,className, elements) => {\n    // check if elements were passed\n    // to function\n    switch (action) {\n        case 'add':\n            // add code\n            if (elements) {\n                switch (elements.constructor) {\n                    //  If elements type is Array, sweet go through\n                    // add the className from the element.classList\n                    case Array:\n                        elements.map(element => (element.classList.add(className)));\n                        break;\n                    //  If elements type is String, sweet go through\n                    //  define an array of that String and add the\n                    //  className from each element.classList\n                    case String:\n                        // make the array\n                        const collection = [...document.getElementsByClassName(elements)];\n                        // while the array has a length\n                        while (collection.length) {\n                            // take the last item off the array\n                            let currentElement = collection.pop();\n                            // manipulate it's class\n                            currentElement.classList.add(className);\n                        }\n                        break;\n                    default:\n                        throw new Error(`Could not add classNames from elements, check arguments`);\n                        break;\n                }\n            } else if (className) {\n                const elements = [...document.getElementsByClassName(className)];\n                elements.map(element => (element.classList.add(className)));\n            } else {\n                throw new Error('Could not manipulate classes, check arguments');\n            }\n            break;\n        case 'remove':\n            // remove code\n            if (elements) {\n                switch (elements.constructor) {\n                    //  If elements type is Array, sweet go through\n                    // remove the className from the element.classList\n                    case Array:\n                        elements.map(element => (element.classList.remove(className)));\n                        break;\n                    //  If elements type is String, sweet go through\n                    //  define an array of that String and remove the\n                    //  className from each element.classList\n                    case String:\n                        // make the array\n                        const collection = [...document.getElementsByClassName(elements)];\n                        // while the array has a length\n                        while (collection.length) {\n                            // take the last item off the array\n                            let currentElement = collection.pop();\n                            // manipulate it's class\n                            currentElement.classList.remove(className);\n                        }\n                        break;\n                    default:\n                        throw new Error(`Could not remove classNames from elements, check arguments`);\n                }\n            } else if (className) {\n                const elements = [...document.getElementsByClassName(className)];\n                elements.map(element => (element.classList.remove(className)));\n            } else {\n                throw new Error('Could not manipulate classes, check arguments');\n            }\n            break;\n        default:\n            throw new Error('No action, please choose either add or remove.');\n    }\n}\n});\n"]}