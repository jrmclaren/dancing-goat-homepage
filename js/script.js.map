{"version":3,"sources":["script.precomp.js"],"names":[],"mappings":";;;;;;;;AAAA;AACA,SAAS,gBAAT,CAA0B,kBAA1B,EAA8C,YAAM;AAChD;;;;;;;;;;;;;;;;;;;;;;;AADgD,QAwB1C,IAxB0C;AAyB5C,sBAAa,SAAb,EAAwB;AAAA;;AACpB,iBAAK,QAAL,GAAgB,UAAU,QAA1B;AACA,iBAAK,GAAL,GAAW,UAAU,GAArB;AACA,iBAAK,QAAL,GAAgB,UAAU,QAA1B;AACA,iBAAK,oBAAL,GAA4B,UAAU,oBAAtC;AACA,iBAAK,aAAL,GAAqB,UAAU,aAA/B;AACA,iBAAK,MAAL,GAAc,KAAd;AACA;AACA,iBAAK,iBAAL,GAAyB,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAAzB;AACA,iBAAK,eAAL,GAAuB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAvB;AACA,iBAAK,UAAL,GAAkB,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAAlB;AACA,iBAAK,IAAL,GAAY,KAAK,IAAL,CAAU,IAAV,CAAe,IAAf,CAAZ;AACH;;AArC2C;AAAA;AAAA,mCAsCtC;AAAA;;AACF;AACA,qBAAK,QAAL,CAAc,GAAd,CAAmB,gBAAQ;AACvB,yBAAK,gBAAL,CAAuB,OAAvB,EAAgC,MAAK,eAArC;AACH,iBAFD;AAGA;AACA,qBAAK,QAAL,CAAc,gBAAd,CAA+B,QAA/B,EAAyC,KAAK,UAA9C;AACH;AA7C2C;AAAA;AAAA,gDA+CxB;AAChB,uBAAO,CAAC,KAAK,QAAN,EAAgB,KAAK,GAArB,EAA0B,KAAK,oBAA/B,EAAqD,KAAK,aAA1D,CAAP;AACH;AAjD2C;AAAA;AAAA,8CAmD1B;AACd,qBAAK,QAAL,CAAc,OAAd,GAAwB,KAAxB;AACA,qBAAK,UAAL;AACH;AAtD2C;AAAA;AAAA,yCAwD/B;AACT;AACA,oBAAI,iBAAiB,KAAK,iBAAL,EAArB;AACA,qBAAK;AACD;AADJ,kBAEM,UAAU,WAAV,CAAsB,QAAtB,EAAgC,cAAhC;AACF;AAHJ,kBAIM,UAAU,QAAV,CAAmB,QAAnB,EAA6B,cAA7B,CAJN;AAKA;AACA,qBAAK,MAAL,GAAc,CAAC,KAAK,MAApB;AACH;AAlE2C;;AAAA;AAAA,SAmE9C;AACF;;;;;AAGA,QAAM,eAAe;AACjB,kBAAU,SAAS,cAAT,CAAwB,MAAxB,CADO;AAEjB,aAAK,SAAS,sBAAT,CAAgC,KAAhC,EAAuC,CAAvC,CAFY;AAGjB,+CAAc,SAAS,gBAAT,CAA0B,YAA1B,CAAd,EAHiB;AAIjB,8BAAsB,SAAS,sBAAT,CAAgC,QAAhC,EAA0C,CAA1C,CAJL;AAKjB,uBAAe,SAAS,aAAT,CAAuB,iBAAvB;AALE,KAArB;AAOA,QAAM,OAAO,IAAI,IAAJ,CAAS,YAAT,CAAb;AACA,SAAK,IAAL;AACJ;;;AAGA,QAAM,YAAY;AACd;;;;;;AAMA,kBAAU,kBAAC,SAAD,EAAY,QAAZ,EAAyB;AAC3B,gBAAI,QAAJ,EAAc;AACV,wBAAQ,SAAS,WAAjB;AACI;AACA;AACA,yBAAK,KAAL;AACI,iCAAS,GAAT,CAAa;AAAA,mCAAY,QAAQ,SAAR,CAAkB,GAAlB,CAAsB,SAAtB,CAAZ;AAAA,yBAAb;AACA;AACJ;AACA;AACA;AACA,yBAAK,MAAL;AACI;AACA,4BAAM,0CAAiB,SAAS,sBAAT,CAAgC,QAAhC,CAAjB,EAAN;AACA;AACA,+BAAO,WAAW,MAAlB,EAA0B;AACtB;AACA,gCAAI,iBAAiB,WAAW,GAAX,EAArB;AACA;AACA,2CAAe,SAAf,CAAyB,GAAzB,CAA6B,SAA7B;AACH;AACD;AACJ;AACI,8BAAM,IAAI,KAAJ,2DAAN;AACA;AAtBR;AAwBH,aAzBD,MAyBQ;AACJ,sBAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACH;AACJ,SApCS,EAoCP;AACP;;;;;;;;;;AAUA,qBAAa,qBAAE,SAAF,EAAa,QAAb,EAA2B;AAChC,gBAAI,QAAJ,EAAc;AACV,wBAAQ,SAAS,WAAjB;AACI;AACA;AACA,yBAAK,KAAL;AACI,iCAAS,GAAT,CAAa;AAAA,mCAAY,QAAQ,SAAR,CAAkB,MAAlB,CAAyB,SAAzB,CAAZ;AAAA,yBAAb;AACA;AACJ;AACA;AACA;AACA,yBAAK,MAAL;AACI;AACA,4BAAM,0CAAiB,SAAS,sBAAT,CAAgC,QAAhC,CAAjB,EAAN;AACA;AACA,+BAAO,WAAW,MAAlB,EAA0B;AACtB;AACA,gCAAI,iBAAiB,WAAW,GAAX,EAArB;AACA;AACA,2CAAe,SAAf,CAAyB,MAAzB,CAAgC,SAAhC;AACH;AACD;AACJ;AACI,8BAAM,IAAI,KAAJ,8DAAN;AArBR;AAuBH,aAxBD,MAwBO,IAAI,SAAJ,EAAe;AAClB,oBAAM,yCAAe,SAAS,sBAAT,CAAgC,SAAhC,CAAf,EAAN;AACA,0BAAS,GAAT,CAAa;AAAA,2BAAY,QAAQ,SAAR,CAAkB,MAAlB,CAAyB,SAAzB,CAAZ;AAAA,iBAAb;AACH,aAHM,MAGA;AACH,sBAAM,IAAI,KAAJ,CAAU,+CAAV,CAAN;AACH;AACJ,SA9ES,CA8ER;AA9EQ,KAAlB;AAgFC,CAnKD","file":"script.js","sourcesContent":["// Wait for the DOM Content to finish loading\ndocument.addEventListener('DOMContentLoaded', () => {\n    /**\n     * @class Menu contains all logic and functionality for\n     * the menu.\n     * Call function Menu.init() to operate.\n     *\n     * Pass in an Object {} containing\n     * menuIcon - Icon being used for the menu (usually\n     * the label in the 'checkbox' hack.\n     *\n     * nav – the high container element that\n     * has all the menu items in it. Usually\n     * a <nav> element.\n     *\n     * navItems – Array of all the links in the\n     * navigation.\n     *\n     * navigationBackground – The element to put up\n     * when the menu is active.\n     *\n     * menuContainer – the parent container element of\n     * all the elements that pertain to navigation\n     *\n     */\n    class Menu {\n        constructor( menuItems ){\n            this.menuIcon = menuItems.menuIcon;\n            this.nav = menuItems.nav;\n            this.navItems = menuItems.navItems;\n            this.navigationBackground = menuItems.navigationBackground;\n            this.menuContainer = menuItems.menuContainer;\n            this.isOpen = false;\n            // bind those functions up to 'this'\n            this.getToggleElements = this.getToggleElements.bind(this);\n            this.handleSelection = this.handleSelection.bind(this);\n            this.toggleMenu = this.toggleMenu.bind(this);\n            this.init = this.init.bind(this);\n        }\n        init(){\n            // add handleSelection to each link\n            this.navItems.map( link => {\n                link.addEventListener( 'click', this.handleSelection);\n            });\n            // add toggleMenu to change event on menuIcon (i.e. checkbox)\n            this.menuIcon.addEventListener('change', this.toggleMenu);\n        }\n\n        getToggleElements() {\n            return [this.menuIcon, this.nav, this.navigationBackground, this.menuContainer];\n        }\n\n        handleSelection() {\n            this.menuIcon.checked = false;\n            this.toggleMenu();\n        };\n\n        toggleMenu() {\n            // get the toggleElements;\n            let toggleElements = this.getToggleElements();\n            this.isOpen\n                // if isOpen == true remove classes\n                ? Utilities.removeClass('active', toggleElements)\n                // else if isOpen == false add classes\n                : Utilities.addClass('active', toggleElements);\n            // toggle state\n            this.isOpen = !this.isOpen;\n        };\n    } // end of class Menu\n    /*\n   Menu elements\n    */\n    const menuElements = {\n        menuIcon: document.getElementById('menu'),\n        nav: document.getElementsByClassName('nav')[0],\n        navItems: [...document.querySelectorAll('.nav__link')],\n        navigationBackground: document.getElementsByClassName('nav-bg')[0],\n        menuContainer: document.querySelector('.menu-container')\n    };\n    const menu = new Menu(menuElements);\n    menu.init();\n/*\nUTILITY FUNCTIONS\n */\nconst Utilities = {\n    /**\n     *\n     * @param className = className to add\n     * @param elements  = elements to add to\n     *\n     */\n    addClass: (className, elements) => {\n            if (elements) {\n                switch (elements.constructor) {\n                    //  If elements type is Array, sweet go through\n                    // add the className from the element.classList\n                    case Array:\n                        elements.map(element => (element.classList.add(className)));\n                        break;\n                    //  If elements type is String, sweet go through\n                    //  define an array of that String and add the\n                    //  className from each element.classList\n                    case String:\n                        // make the array\n                        const collection = [...document.getElementsByClassName(elements)];\n                        // while the array has a length\n                        while (collection.length) {\n                            // take the last item off the array\n                            let currentElement = collection.pop();\n                            // manipulate it's class\n                            currentElement.classList.add(className);\n                        }\n                        break;\n                    default:\n                        throw new Error(`Could not add classNames from elements, check arguments`);\n                        break;\n                }\n            }  else {\n                throw new Error('Could not add classes, check arguments');\n            }\n        }, // end of addClass() function\n    /**\n     *\n     * @param className = className to remove\n     * @param elements (option) = Array or String of element(s)\n     *                            to remove from\n     *\n     * If no elements are provided, the elements\n     * containing the class to remove will targeted.\n     *\n     */\n    removeClass: ( className, elements ) => {\n            if (elements) {\n                switch (elements.constructor) {\n                    //  If elements type is Array, sweet go through\n                    // remove the className from the element.classList\n                    case Array:\n                        elements.map(element => (element.classList.remove(className)));\n                        break;\n                    //  If elements type is String, sweet go through\n                    //  define an array of that String and remove the\n                    //  className from each element.classList\n                    case String:\n                        // make the array\n                        const collection = [...document.getElementsByClassName(elements)];\n                        // while the array has a length\n                        while (collection.length) {\n                            // take the last item off the array\n                            let currentElement = collection.pop();\n                            // manipulate it's classes\n                            currentElement.classList.remove(className);\n                        }\n                        break;\n                    default:\n                        throw new Error(`Could not remove classNames from elements, check arguments`);\n                }\n            } else if (className) {\n                const elements = [...document.getElementsByClassName(className)];\n                elements.map(element => (element.classList.remove(className)));\n            } else {\n                throw new Error('Could not manipulate classes, check arguments');\n            }\n        } // end of removeClass() function\n    }\n});\n"]}